/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import DAO.Conexao;
import DAO.ContaDAO;
import controller.ControllerCompraVenda;
import javax.swing.JButton;
import javax.swing.JLabel;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.util.logging.Level;
import java.util.logging.Logger;



/**
 *
 * @author Gabriel
 */
public class JanelaSaldo extends javax.swing.JFrame {
    private String cpf;
  

    /**
     * Creates new form JanelaSaldo
     */
    public JanelaSaldo(String cpf)  {
        this.cpf = cpf;
        initComponents();
        exibirSaldo();
        //exibirSaldo2(cpf);
        //exibirSaldoCriptomoedas();


    }
    
    

    public String getCpf() {
        return cpf;
    }

    public void setCpf(String cpf) {
        this.cpf = cpf;
    }

    public JButton getBtSaldo() {
        return btSaldo;
    }

    public void setBtSaldo(JButton btSaldo) {
        this.btSaldo = btSaldo;
    }

    public JLabel getLblBtc() {
        return lblBtc;
    }

    public void setLblBtc(JLabel lblBtc) {
        this.lblBtc = lblBtc;
    }

    public JLabel getLblEth() {
        return lblEth;
    }

    public void setLblEth(JLabel lblEth) {
        this.lblEth = lblEth;
    }

    public JLabel getLblMostra() {
        return lblMostra;
    }

    public void setLblMostra(JLabel lblMostra) {
        this.lblMostra = lblMostra;
    }

    public JLabel getLblReal() {
        return lblReal;
    }

    public void setLblReal(JLabel lblReal) {
        this.lblReal = lblReal;
    }

    public JLabel getLblSaldo() {
        return lblSaldo;
    }

    public void setLblSaldo(JLabel lblSaldo) {
        this.lblSaldo = lblSaldo;
    }

    public JLabel getLblXrp() {
        return lblXrp;
    }

    public void setLblXrp(JLabel lblXrp) {
        this.lblXrp = lblXrp;
    }
    public void setSaldoBtc(double saldoBtc){
        lblMostraBtc.setText(String.valueOf(saldoBtc));
    }
    public void setSaldoEth(double saldoEth){
        lblMostraEth.setText(String.valueOf(saldoEth));
    }
    public void setSaldoXrp(double saldoXrp){
        lblMostraXrp.setText(String.valueOf(saldoXrp));
    }
    
    
        public void setSaldo(double saldo) {
        lblMostra.setText(String.valueOf(saldo));
    }
    
//        public void setSaldoCriptomoeda(String moeda, double saldoCripto) {
//        switch (moeda) {
//            case "saldo_btc":
//                lblMostraBtc.setText(String.valueOf(saldoCripto));
//                break;
//            case "saldo_eth":
//                lblMostraEth.setText(String.valueOf(saldoCripto));
//                break;
//            case "saldo_xrp":
//                lblMostraXrp.setText(String.valueOf(saldoCripto));
//                break;
//            default:
//                break;
//        }
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSaldo = new javax.swing.JLabel();
        btSaldo = new javax.swing.JButton();
        lblReal = new javax.swing.JLabel();
        lblBtc = new javax.swing.JLabel();
        lblEth = new javax.swing.JLabel();
        lblXrp = new javax.swing.JLabel();
        lblMostra = new javax.swing.JLabel();
        lblMostraBtc = new javax.swing.JLabel();
        lblMostraEth = new javax.swing.JLabel();
        lblMostraXrp = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblSaldo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblSaldo.setText("Seu saldo Ã©:");

        btSaldo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btSaldo.setText("Voltar");
        btSaldo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaldoActionPerformed(evt);
            }
        });

        lblReal.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblReal.setText("Reais:");

        lblBtc.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblBtc.setText("Bitcoin:");

        lblEth.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblEth.setText("Eth:");

        lblXrp.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblXrp.setText("Xrp:");

        lblMostra.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblMostra.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblMostraBtc.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblMostraBtc.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblMostraEth.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblMostraEth.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblMostraXrp.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblMostraXrp.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addComponent(btSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblReal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblMostra, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblSaldo)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblBtc)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblMostraBtc, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblEth)
                                .addGap(18, 18, 18)
                                .addComponent(lblMostraEth, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblXrp)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblMostraXrp, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(91, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(lblSaldo)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblReal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblMostra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblBtc)
                    .addComponent(lblMostraBtc, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEth)
                    .addComponent(lblMostraEth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblXrp)
                    .addComponent(lblMostraXrp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(32, 32, 32)
                .addComponent(btSaldo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btSaldoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaldoActionPerformed
        new JanelaFuncoes(cpf).setVisible(true);
    }//GEN-LAST:event_btSaldoActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(JanelaSaldo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(JanelaSaldo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(JanelaSaldo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(JanelaSaldo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new JanelaSaldo().setVisible(true);
//            }
//        });
//    }
    private void exibirSaldo() {
        Conexao conexao = new Conexao();
        try {
            Connection conn = conexao.getConnection();
            String sql = "select saldo from usuarios where cpf = ?";
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setString(1, cpf);
                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {
                        double saldo = rs.getDouble("saldo");
                        lblMostra.setText(Double.toString(saldo));
                    } else {
                        lblMostra.setText("0.0"); // ou qualquer valor padrÃ£o
                    }
                }
            }
        } catch (SQLException ex) {
            // Trate ou registre a exceÃ§Ã£o adequadamente
            ex.printStackTrace();
        }
    }
    

//    private void exibirSaldoCriptomoedas() {
//        Conexao conexao = new Conexao();
//        try {
//            Connection conn = conexao.getConnection();
//            String sql = "SELECT saldo_btc, saldo_eth, saldo_xrp FROM usuarios WHERE cpf = ?";
//            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
//                stmt.setString(1, cpf);
//                try (ResultSet rs = stmt.executeQuery()) {
//                    if (rs.next()) {
//                        double btc = rs.getDouble("saldo_btc");
//                        double eth = rs.getDouble("saldo_eth");
//                        double xrp = rs.getDouble("saldo_xrp");
//                        setSaldoCriptomoeda("saldo_btc", btc);
//                        setSaldoCriptomoeda("saldo_eth", eth);
//                        setSaldoCriptomoeda("saldo_xrp", xrp);
//                    }// else {
////                        // Se nÃ£o houver registros para o usuÃ¡rio, exiba 0 para todos os saldos
////                        setSaldoCriptomoeda("saldo_btc", 0.0);
////                        setSaldoCriptomoeda("saldo_eth", 0.0);
////                        setSaldoCriptomoeda("saldo_xrp", 0.0);
////                    }
//                }
//            }
//        } catch (SQLException ex) {
//            // Trate ou registre a exceÃ§Ã£o adequadamente
//            ex.printStackTrace();
//        }
//        
//        
//    }

//    private void atualizarInformacoes() {
//        try {
//            double saldo = controller.consultarSaldo(cpf);
//            double btc = controller.consultarQuantidadeCripto(cpf, "btc");
//            double eth = controller.consultarQuantidadeCripto(cpf, "eth");
//            double xrp = controller.consultarQuantidadeCripto(cpf, "xrp");
//            System.out.println("Saldo Atual: " + saldo);
//            System.out.println("BTC Atual: " + btc);
//            System.out.println("ETH Atual: " + eth);
//            System.out.println("XRP Atual: " + xrp);
//            lblSaldo.setText("Saldo: " + saldo);
//            lblBtc.setText("BTC: " + btc);
//            lblEth.setText("ETH: " + eth);
//            lblXrp.setText("XRP: " + xrp);
//        } catch (SQLException ex) {
//            Logger.getLogger(JanelaSaldo.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }

    
    public void setSaldoBtc(double saldoBtc, String cpf) {
        // Atualizar o saldo do Bitcoin na interface grÃ¡fica
        // Por exemplo:
        // btcLabel.setText(String.valueOf(saldoBtc));
        // Atualizar o saldo do Bitcoin no banco de dados
        try {
            Connection conn = new Conexao().getConnection();
            ContaDAO contaDAO = new ContaDAO(conn);
            contaDAO.atualizaBtc(cpf, "btc", saldoBtc);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    public void setSaldoEth(double saldoEth, String cpf) {
        // Atualizar o saldo do Ethereum na interface grÃ¡fica
        // Por exemplo:
        // ethLabel.setText(String.valueOf(saldoEth));
        // Atualizar o saldo do Ethereum no banco de dados
        try {
            Connection conn = new Conexao().getConnection();
            ContaDAO contaDAO = new ContaDAO(conn);
            contaDAO.atualizaEth(cpf, "eth", saldoEth);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    public void setSaldoXrp(double saldoXrp, String cpf) {
        // Atualizar o saldo do Ripple na interface grÃ¡fica
        // Por exemplo:
        // xrpLabel.setText(String.valueOf(saldoXrp));
        // Atualizar o saldo do Ripple no banco de dados
        try {
            Connection conn = new Conexao().getConnection();
            ContaDAO contaDAO = new ContaDAO(conn);
            contaDAO.atualizaXrp(cpf, "xrp", saldoXrp);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
        public void atualizarSaldoCripto(String cpf, String nome, double quantidade) {
    // Atualiza o saldo da criptomoeda na janela
        if (nome.equals("btc")) {
        // Atualiza saldo de BTC na janela
        lblMostraBtc.setText(Double.toString(quantidade));
    } else if (nome.equals("eth")) {
        // Atualiza saldo de ETH na janela
        lblMostraEth.setText(Double.toString(quantidade));
    } else if (nome.equals("xrp")) {
        // Atualiza saldo de XRP na janela
        lblMostraXrp.setText(Double.toString(quantidade));
    }
 }     
        
//            public void exibirSaldo2(String cpf) {
//    Conexao conexao = new Conexao();
//    try {
//        Connection conn = conexao.getConnection();
//        String sql = "SELECT saldo, saldo_btc, saldo_eth, saldo_xrp FROM usuarios WHERE cpf = ?";
//        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
//            stmt.setString(1, cpf);
//            try (ResultSet rs = stmt.executeQuery()) {
//                if (rs.next()) {
//                    double saldoBtc = rs.getDouble("saldo_btc");
//                    double saldoEth = rs.getDouble("saldo_eth");
//                    double saldoXrp = rs.getDouble("saldo_xrp");
//                    
//                    // Exibir os saldos na interface
//                    lblMostraBtc.setText(Double.toString(saldoBtc));
//                    lblMostraEth.setText(Double.toString(saldoEth));
//                    lblMostraXrp.setText(Double.toString(saldoXrp));
//
//                } else {
//                    // Caso nÃ£o haja saldo para esse usuÃ¡rio
//                    lblMostraBtc.setText("0.0");
//                    lblMostraEth.setText("0.0");
//                    lblMostraXrp.setText("0.0");
//                }
//            }
//        }
//    } catch (SQLException ex) {
//        // Trate ou registre a exceÃ§Ã£o adequadamente
//        ex.printStackTrace();
//    }
//}
    public void exibirSaldoEth(){
        Conexao conexao = new Conexao();
        try {
            Connection conn = conexao.getConnection();
            String sql = "select saldo_eth from usuarios where cpf = ?";
            try(PreparedStatement stmt = conn.prepareStatement(sql)){
                stmt.setString(1, cpf);
             try(ResultSet rs = stmt.executeQuery()){
                 if (rs.next()){
                     double saldoEth = rs.getDouble("saldo_eth");
                     lblMostraEth.setText(Double.toString(saldoEth));
                 }
             }
            }
        } catch(SQLException ex){
            ex.printStackTrace();
        }
    }
    
    public void exibirSaldoBtc(){
        Conexao conexao = new Conexao();
        try {
            Connection conn = conexao.getConnection();
            String sql = "select saldo_btc from usuarios where cpf = ?";
            try(PreparedStatement stmt = conn.prepareStatement(sql)){
                stmt.setString(1, cpf);
             try(ResultSet rs = stmt.executeQuery()){
                 if (rs.next()){
                     double saldoBtc = rs.getDouble("saldo_btc");
                     lblMostraBtc.setText(Double.toString(saldoBtc));
                 }
             }
            }
        } catch(SQLException ex){
            ex.printStackTrace();
        }
    }
    
    
    public void exibirSaldoXrp(){
        Conexao conexao = new Conexao();
        try {
            Connection conn = conexao.getConnection();
            String sql = "select saldo_xrp from usuarios where cpf = ?";
            try(PreparedStatement stmt = conn.prepareStatement(sql)){
                stmt.setString(1, cpf);
             try(ResultSet rs = stmt.executeQuery()){
                 if (rs.next()){
                     double saldoXrp = rs.getDouble("saldo_xrp");
                     lblMostraXrp.setText(Double.toString(saldoXrp));
                 }
             }
            }
        } catch(SQLException ex){
            ex.printStackTrace();
        }
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btSaldo;
    private javax.swing.JLabel lblBtc;
    private javax.swing.JLabel lblEth;
    private javax.swing.JLabel lblMostra;
    private javax.swing.JLabel lblMostraBtc;
    private javax.swing.JLabel lblMostraEth;
    private javax.swing.JLabel lblMostraXrp;
    private javax.swing.JLabel lblReal;
    private javax.swing.JLabel lblSaldo;
    private javax.swing.JLabel lblXrp;
    // End of variables declaration//GEN-END:variables

   


}
